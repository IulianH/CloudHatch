services:
  auth.web:
    image: ${DOCKER_REGISTRY-}authweb
    build:
      context: .
      dockerfile: Auth/Auth.Web/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
      - REDIS__CONNECTION=redis:6379,password=devredispassword,defaultDatabase=0
    ports:
      - "8080"
    networks:
      - private    
    depends_on:
      - redis

  res.web:
    image: ${DOCKER_REGISTRY-}resweb
    build:
      context: .
      dockerfile: Res/Res.Web/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
    ports:
      - "8080"
    networks:
      - private                  

  users.web:
    image: ${DOCKER_REGISTRY-}usersweb
    build:
      context: .
      dockerfile: Users/Users.Web/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=8080
    ports:
      - "8080"
    networks:
      - private                  

  # Next.js development service with hot reload and debugging
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    ports:
      - "3000:3000"    # Next.js dev server
      - "9229:9229"    # Node.js debugger port
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
      - NODE_OPTIONS=--inspect=0.0.0.0:9229
    networks:
      - private
      - default        # Allow direct access for debugging

  reverse-proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "5100:5100"
      - "443:443"
    networks:
      - default                  # egress to Internet (OCSP/ACME/etc.)
      - private                  # reach the private app
    depends_on:
      - auth.web
      - res.web
      - users.web
      - frontend

  redis:
    image: redis:7
    command: [ "redis-server", "--appendonly", "yes" ]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "devredispassword", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - private
  
volumes:
  redisdata: { }
     
networks:
  private:
    internal: true 